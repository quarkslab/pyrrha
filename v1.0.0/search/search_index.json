{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Pyrrha is a filesystem cartography and correlation software focusing on visualization. It currently focuses on the relationship between executable files but aims at enabling anyone to map and visualize any relationship types. It uses the open-source code source explorer NumbatUI to provide users with an easy way to navigate through and search for  path to function.</p> <p></p> <p> An example of the symbols and libraries imported by <code>libgcc_s.so.1</code> and of the symbols which reference this library. </p> <p></p> <p> An example of the symlinks which point on <code>busybox</code>. </p>"},{"location":"#installation","title":"Installation","text":"<p>The installation is done in three parts:</p> <ol> <li>Install mapper external dependencies: IDA dissassembler (with the decompilation option for the <code>exe-decomp</code> mapper) and <code>Quokka</code> IDA plugin.</li> <li>Install <code>Pyrrha</code> itself.</li> <li>Install <code>NumbatUI</code> (or <code>Sourcetrail</code>) to be able to visualize Pyrrha's results. </li> </ol> <p>Quick Start</p> SourcetrailNumbatUI (Ubuntu/Debian) <ol> <li> <p>Install Quokka plugin by downloaded the appropriate version from its release page. Then follow the instructions according to your OS.</p> </li> <li> <p>Install Sourcetrail and Pyrrha.</p> LinuxWindowsMacOS <pre><code>SOURCETRAIL_URL='https://github.com/CoatiSoftware/Sourcetrail/releases/download/2021.4.19/Sourcetrail_2021_4_19_Linux_64bit.tar.gz'\nCHECKSUM=\"\"f65a401daad8e16f29f7b2ff062a559999b6a8d44606db36cdf803de0cd7816d\nEXTRACTION_DIR=\"/tmp/Sourcetrail_2021_4_19_Linux_64bit\"\nDOWNLOAD_PATH=\"$EXTRACTION_PATH.tar.gz\"\n\nwget $SOURCETRAIL_URL -O $DOWNLOAD_PATH\necho $CHECKSUM $DOWNLOAD_PATH | sha256sum -c \n\nif [ $? == 0 ]; then\n   echo '==== Install Sourcetrail'\n   tar xf $DOWNLOAD_PATH -C $EXTRACTION_DIR\n   sudo $EXTRACTION_DIR/Sourcetrail/install.sh\n   rm -rf $DOWNLOAD_PATH $EXTRACTION_DIR\nfi\n\n# Install pyrrha\nif [ $? == 0 ]; then\n   echo '==== Install Pyrrha'\n   pip install pyrrha-mapper\nfi\n</code></pre> <ol> <li>Download last Sourcetrail release, unzip it and run the <code>setup.exe</code>.</li> <li>Install pyrrha: <code>pip install pyrrha-mapper</code></li> </ol> <ol> <li>Download last Sourcetrail release, and install it following Sourcetrail documentation.</li> <li>Install pyrrha: <code>pip install pyrrha-mapper</code></li> </ol> </li> </ol> <p>Tested only for last Ubuntu/Debian.</p> <p>First install Quokka plugin by downloaded the appropriate version from its release page.</p> <p>Then run the following script that will clone and build <code>NumbatUI</code> and install <code>Pyrrha</code>. <code>NumbatUI</code> will in <code>numbatui/build/Release/app</code>.</p> <pre><code># Prerequisites for Numbat UI\nsudo apt-get update\nsudo apt-get install -y \\\n             cmake \\\n             git \\\n             build-essential \\\n             libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-date-time-dev \\\n             qt6-svg-dev qt6-base-dev qt6-5compat-dev \\\n             unzip wget \\\n             libclang-17-dev clang-17\n\n# Clone and Build NumbatUI\ngit clone https://github.com/quarkslab/NumbatUI.git numbatui \ncd numbatui\nmkdir -p build/Release \ncd build/Release\ncmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_CXX_LANGUAGE_PACKAGE=ON -DBUILD_PYTHON_LANGUAGE_PACKAGE=ON ../.. &amp;&amp; make NumbatUI -j $(nproc)\n\n# Install pyrrha\npip install pyrrha-mapper\n</code></pre> <p>Note</p> <p>Detailed instructions can be found on the dedicated documentation page.</p>"},{"location":"#usage","title":"Usage","text":"<p>The usage workflow is composed of two steps which allow you to separate DB creation and result visualization.</p> <ol> <li>Run Pyrrha to obtain NumbatUI compatible files (<code>*.srctrlprj</code> for the project file and <code>*.srctrldb</code> for the DB file). With the python package, you can just launch the command <code>pyrrha</code>.</li> <li>Visualize your results with Sourcetrail/NumbatUI. </li> </ol> <p>Note</p> <p>The detailed documentation of each mapper is available in the documentation.</p>"},{"location":"#publications","title":"Publications","text":"<p>Pyrrha has been presented by Elo\u00efse Brocas at two conferences listed below. These talks include live demo of the <code>fs</code> parser which map links between libraries and executables files.</p> <ul> <li>Pyrrha: navigate easily into your system binaries, Hack.lu'23. [slides] [video] </li> <li>Map your Firmware!, PTS'23. [slides] [video] </li> </ul> <p>The theoritical details below the <code>fs-cg</code> and <code>exe-decomp</code> mappers implementation have been presented by Robin David.</p> <ul> <li>Streamlining Firmware Analysis with Inter-Image Call Graphs and Decompilation, RE/verse.io 2025. [slides] [video]</li> </ul>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Elo\u00efse Brocas (@ebrocas), Quarkslab</li> <li>Robin David (@RobinDavid), Quarkslab</li> </ul>"},{"location":"#past-contributors","title":"Past Contributors","text":"<ul> <li>Pascal Wu (@pwu42), during his internship at Quarkslab</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v043resolution-strategies","title":"v0.4.3\u2014Resolution Strategies","text":""},{"location":"changelog/#features","title":"Features","text":"<p>File system parser:</p> <ul> <li>Add duplicate import resolution strategies: the user can now choose between three strategies (<code>--ignore</code>, <code>--arbitrary</code>, <code>--interactive</code>).</li> <li>Add customization into the resulting graph (NumbatUI features, which is currently under active development).</li> <li>Rework internal mapper architecture.</li> </ul>"},{"location":"changelog/#fixes","title":"Fixes","text":"<p>File system parser:</p> <ul> <li>Fix the path resolution issues when firmware path contains <code>..</code></li> </ul> <p>Full Changelog: https://github.com/quarkslab/pyrrha/compare/v0.4.2...v0.4.3</p>"},{"location":"changelog/#v042documentation","title":"v0.4.2\u2014Documentation","text":"<p>This version introduces a brand new documentation and some uniformization to help future mapper development.</p>"},{"location":"changelog/#features_1","title":"Features","text":"<p>All:</p> <ul> <li>A new documentation</li> </ul> <p>File system parser:</p> <ul> <li>Deactivate lief logging to reduce \"noise\".</li> </ul> <p>Docker/CI:</p> <ul> <li>Add template for future mapper.</li> </ul> <p>Full Changelog: https://github.com/quarkslab/pyrrha/compare/v0.4.1...v0.4.2</p>"},{"location":"changelog/#v041","title":"v0.4.1","text":"<p>This version enforces the usage of a more efficient version of numbat and fixes some little bugs.</p>"},{"location":"changelog/#features_2","title":"Features","text":"<p>All:</p> <ul> <li>enforce numbat &gt;= 0.2 to increase analysis speed</li> </ul>"},{"location":"changelog/#fixes_1","title":"Fixes","text":"<p>File system parser:</p> <ul> <li>check db existence with the appropriate numbat method</li> <li>remove error-prone path modifications in symlink resolution</li> </ul> <p>Full Changelog: https://github.com/quarkslab/pyrrha/compare/v0.4.0...v0.4.1</p>"},{"location":"changelog/#v040numbat-version","title":"v0.4.0\u2014Numbat version","text":"<p>This version introduces the usage of Numbat, our home-made Sourcetrail SDK fully Pythonic. Thanks to it, <code>pyrrha</code> is much easier to install.</p>"},{"location":"changelog/#features_3","title":"Features","text":"<p>All:</p> <ul> <li>Remove SourcetrailDB dependency to use <code>numbat</code> library</li> </ul> <p>File system parser:</p> <ul> <li>multiprocess binary parsing (lief export)</li> </ul> <p>Docker/CI:</p> <ul> <li>Adapt to numbat dependency. Remove all the useless installations.</li> <li>Add package publication on pypi.</li> </ul>"},{"location":"changelog/#important-changes","title":"Important Changes","text":"<ul> <li>Package name was changes into <code>pyrrha-mapper</code> as the <code>pyrrha</code> package already exists on Pypi.</li> </ul>"},{"location":"changelog/#fixes_2","title":"Fixes","text":"<ul> <li>Symlink resolution was partially broken due to not extensive checks on the path. It was trying to parse directory for example.</li> </ul>"},{"location":"changelog/#associated-python-package","title":"Associated Python package","text":"<p>This release contains a CI that automatically upload the package on Pypi. You can now install Pyrrha by doing <pre><code>pip install pyrrha-mapper\n</code></pre></p> <p>Full Changelog: https://github.com/quarkslab/pyrrha/compare/v0.3.0...v0.4.0</p>"},{"location":"changelog/#v030hacklu-edition","title":"v0.3.0\u2014Hack.lu edition","text":"<p>Version release at the occasion of the talk Pyrrha: navigate easily into your system binaries given at the CTI-summit of Hack.lu.</p> <p>Full Changelog: https://github.com/quarkslab/pyrrha/compare/v0.2.0...v0.3.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<p>File system parser:</p> <ul> <li>change JSON export structure</li> </ul> <p>Documentation:</p> <ul> <li>add example of diffing using JSON export</li> <li>extend README to include new features</li> </ul> <p>Docker/CI:</p> <ul> <li>Change base Docker image to a lighter one (<code>python</code> to <code>python-slim</code>)</li> <li>Add automatic build and upload of Docker image on Quarkslab's Github registry</li> </ul>"},{"location":"changelog/#fixes_3","title":"Fixes","text":"<p>None</p>"},{"location":"changelog/#associated-docker-image","title":"Associated Docker Image","text":"<p>Install from command line: <pre><code>docker pull ghcr.io/quarkslab/pyrrha:v0.3.0\n</code></pre> Use as base image in Dockerfile: <pre><code>FROM ghcr.io/quarkslab/pyrrha:v0.3.0\n</code></pre></p>"},{"location":"changelog/#v020","title":"v0.2.0","text":"<p>For more details, check associated package page.</p>"},{"location":"changelog/#features_5","title":"Features","text":"<p>CLI:</p> <ul> <li>setup logging and add debug option</li> <li>add <code>-h</code> option to show the usage (equivalent of <code>--help</code>)</li> </ul> <p>File system parser:</p> <ul> <li>add PE support ( it is case sensitive for all imports (functions and libraries)</li> <li>add progress bar to show in real time percentage of wiles which have been indexed</li> <li>unresolved imports (lib and/or symbols) point now on non-indexed symbols to keep information in the database</li> <li>the mapping done by Pyrrha can be exported as a JSON file</li> </ul> <p>Doc:</p> <ul> <li>add options to have real time Docker output in the terminal (for logs and progress bars)</li> </ul>"},{"location":"changelog/#fixes_4","title":"Fixes","text":"<ul> <li>Dockerfile was copying non existing directory, this action has been removed.</li> </ul>"},{"location":"changelog/#v01","title":"v0.1","text":"<p>First public release of Pyrrha</p>"},{"location":"installation/","title":"Installation","text":"<p>The installation is done in three parts:</p> <ul> <li>installing <code>Pyrrha</code> (as a Python module);</li> <li>installing mappers external dependencies if required;</li> <li>installing <code>NumbatUI</code> to be able to visualize Pyrrha's results.</li> </ul> <p>Info</p> <p>It is also possible to visualize results with <code>Sourcetrail</code>, it is the base from which <code>NumbatUI</code> was forked. The user won't be able to use new features like the renaming of the node or the launch of external programs from Sourcetrail/NumbatUI.</p>"},{"location":"installation/#pyrrha-installation","title":"Pyrrha Installation","text":"Python PackageDocker <p>Pyrrha requires a Python version &gt;= 3.10. It is recommended to install the Python package inside a virtualenv. You can use <code>pip</code> to install it. <pre><code>pip install pyrrha-mapper\n</code></pre> If you prefer using sources to install Pyrrha, do the following: <pre><code># Do not forget to activate your virtualenv\npip install 'pyrrha @ git+https://github.com/quarkslab/pyrrha'\n\n# If you prefer, you can manually clone the repository and then install the package\ngit clone https://github.com/quarkslab/pyrrha\ncd pyrrha\npip install '.'\n</code></pre></p> <p><code>pyrrha</code> can be used with a docker. It provides Pyrrha, but you still need to install NumbatUI on your system as described in the NumbatUI Installation section.</p> <p>The docker image is directly available from our Github registry.</p> <pre><code>cd ROOT_DIRECTORY/..\ndocker run  --rm -t -v $PWD:/tmp/pyrrha ghcr.io/quarkslab/pyrrha:latest fs [OPTIONS] ROOT_DIRECTORY\n</code></pre> <p>Warning</p> <p>The docker image has only be built for the <code>fs</code> mapper.</p>"},{"location":"installation/#visualizer-installation","title":"Visualizer Installation","text":"NumbatUISourcetrail <p>NumbatUI should be compiled locally, as explained in its README. For the moment it has only be tested on Ubuntu/Debian distributions.  Here are the summarized compilation instructions:</p> <p>Prerequisites <pre><code>apt-get update\napt-get install -y \\\n        cmake \\\n        git \\\n        build-essential \\\n        libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-date-time-dev \\\n        qt6-svg-dev qt6-base-dev qt6-5compat-dev \\\n        unzip wget \\\n        libclang-17-dev clang-17\n</code></pre></p> <p>Compilation <pre><code>git clone https://github.com/quarkslab/NumbatUI.git numbatui \ncd numbatui\nmkdir -p build/Release \ncd build/Release\ncmake -DCMAKE_BUILD_TYPE=\"Release\" -DBUILD_CXX_LANGUAGE_PACKAGE=ON -DBUILD_PYTHON_LANGUAGE_PACKAGE=ON ../.. &amp;&amp; make NumbatUI -j $(nproc)\n</code></pre></p> LinuxWindowsMacOS <pre><code>SOURCETRAIL_URL='https://github.com/CoatiSoftware/Sourcetrail/releases/download/2021.4.19/Sourcetrail_2021_4_19_Linux_64bit.tar.gz'\nCHECKSUM=\"\"f65a401daad8e16f29f7b2ff062a559999b6a8d44606db36cdf803de0cd7816d\nEXTRACTION_DIR=\"/tmp/Sourcetrail_2021_4_19_Linux_64bit\"\nDOWNLOAD_PATH=\"$EXTRACTION_PATH.tar.gz\"\n\nwget $SOURCETRAIL_URL -O $DOWNLOAD_PATH\necho $CHECKSUM $DOWNLOAD_PATH | sha256sum -c \n\nif [ $? == 0 ]; then\n    echo '==== Install Sourcetrail'\n    tar xf $DOWNLOAD_PATH -C $EXTRACTION_DIR\n    sudo $EXTRACTION_DIR/Sourcetrail/install.sh\n    rm -rf $DOWNLOAD_PATH $EXTRACTION_DIR\nfi\n\n# Install pyrrha\nif [ $? == 0 ]; then\n    echo '==== Install Pyrrha'\n    pip install pyrrha-mapper\nfi\n</code></pre> <p>Download last Sourcetrail release, unzip it and run the <code>setup.exe</code>.</p> <p>Download last Sourcetrail release, and install it following Sourcetrail documentation.</p>"},{"location":"installation/#external-dependencies","title":"External Dependencies","text":"<p>The <code>fs-cg</code> and the <code>exec-decomp</code> mappers require to have a proper installation of Quokka and so of IDA. The <code>exec-decomp</code> also requires to have an IDA license with decompiler.</p> <p>The Quokka plugin for IDA can directly be downloaded from the Release page. The associated Python package is directly installed during Pyrrha Python package installation. </p> <p>Note</p> <p>The <code>fs-cg</code> and the <code>exec-decomp</code> mappers could be used without Quokka and IDA if you already have the cache files for your firmware (<code>.decompiled</code> and <code>.quokka</code> files). More details in the corresponding mapper documentation.</p>"},{"location":"installation/#documentation","title":"Documentation","text":"<p>If you want to build the documentation, you need to install Pyrrha with the <code>[doc]</code> dependencies and then serve the documentation on a local server with <code>mkdocs</code>.</p> <pre><code>pip install 'pyrrha-mapper[doc]'\n\n# serve doc locally\nmkdocs serve\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"contributing/dev_mapper/","title":"Add a new mapper","text":""},{"location":"contributing/dev_mapper/#mapper-development","title":"Mapper Development","text":"<p>First develop your mapper. We are using <code>numbat</code> to manipulate the db used by sourcetrail to store the pieces of information to show in Sourcetrail. Everything is explained in Numbat's detailed tutorial.</p> <p>Then, add the required dependencies into <code>pyproject.toml</code>.</p>"},{"location":"contributing/dev_mapper/#integration-into-the-main-program","title":"Integration into the main program","text":"<p>Once the mapper is ready, it should be integrated into <code>pyrrha</code> CLI by adding the corresponding subcommand in the <code>src/pyrrha_mapper/__main__.py</code>. The CLI system is handled with click</p> <p>The subcommand corresponds to a function implementing the main of your mapper and some decorators to declare the subcommand name, its options and its arguments.</p> <p>The command name is declared with the following decorator. It automatically adds two options: <code>--db</code> to indicate the path of the db and <code>-d</code> to set the log level at <code>DEBUG</code> instead of <code>INFO</code>.</p> <p><pre><code>@pyrrha.command(\n    'my_mapper',  # the command name\n    cls=MapperCommand,  # it will add default options\n    short_help='A quick help.',\n    help='A longer help, display only for this command help, no the general one.'\n)\n</code></pre> You can now add options and arguments if needed. Below you can found some examples but as <code>click</code> is a powerful tool, check the documentation about <code>click.option</code> and <code>click.argument</code> for more details. <pre><code># a flag option (if activated = True, else False)\n@click.option('-o', '--myoption', # short and long option name\n              help='An help message',\n              is_flag=True,\n              default=False,\n              show_default=False)\n# an option to precise the number of threads\n@click.option('-j', '--jobs',\n              help='Number of parallel jobs created (threads).',\n              type=click.IntRange(1, multiprocessing.cpu_count(), clamp=True),\n              metavar='INT',\n              default=1,\n              show_default=True)\n# an argument\n@click.argument('target_directory',\n                type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path))\n</code></pre> Then, you can implement the function that will run your mapper. It will have as parameters all the options and arguments declared before. We also provide two utilities function which sets up the logs and create/open a db given a path.</p> <p>Note</p> <p>Do not forget that by default, the first two parameters will be <code>debug: bool, db: Path</code>.</p> <pre><code>def my_mapper(debug: bool, db: Path, myoption, jobs, target_directory):\n    setup_logs(debug)\n    db_instance = setup_db(db)\n\n    # main work\n\n    db_instance.close() # do not forget to close your db connection    \n</code></pre> Final <code>__main__.py</code> <pre><code>@pyrrha.command(\n    'my_mapper',  # the command name\n    cls=MapperCommand,  # it will add default options\n    short_help='A quick help.',\n    help='A longer help, display only for this command help, no the general one.'\n)\n# a flag option (if activated = True, else False)\n@click.option('-o', '--myoption', # short and long option name\n              help='An help message',\n              is_flag=True,\n              default=False,\n              show_default=False)\n# an option to precise the number of threads\n@click.option('-j', '--jobs',\n              help='Number of parallel jobs created (threads).',\n              type=click.IntRange(1, multiprocessing.cpu_count(), clamp=True),\n              metavar='INT',\n              default=1,\n              show_default=True)\n# an argument\n@click.argument('target_directory',\n                type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path))\ndef my_mapper(debug: bool, db: Path, myoption, jobs, target_directory):\n    setup_logs(debug)\n    db_instance = setup_db(db)\n\n    # main work\n\n    db_instance.close() # do not forget to close your db connection  \n\nif __name__ == '__main__':\n    pyrrha()\n</code></pre>"},{"location":"contributing/dev_mapper/#documentation","title":"Documentation","text":"<p>Finally, you should add a page relative to your mapper inside the documentation. The list below resume the steps to add your mapper in every required places of the documentation:</p> <ol> <li> <p>Write your documentation in a markdown file that should be place into the <code>docs/mappers</code> folder.</p> <p>Tip</p> <p>We are using <code>material</code> theme of the <code>mkdocs</code> doc system. It provides a lot of nice features to improve your documentation like this note block. Do not hesitate to take a look at their documentation!</p> </li> <li> <p>Add your mapper in mapper lists (in <code>README.md</code> and in <code>docs/mappers/mappers.md</code>).</p> </li> <li> <p>Complete the <code>nav</code> section in the <code>mkdocs.yml</code> file to add your file in the site navigation system.</p> <pre><code>nav:\n  - Home: index.md\n  - Installation: installation.md\n  - Mappers:\n      - mappers/mappers.md\n      - Filesystem: mappers/fs.md\n      - My Mapper: mappers/my_mapper.md\n</code></pre> </li> </ol>"},{"location":"mappers/exe-decomp/","title":"<code>exe-decomp</code>: Executable Decompilation mapper","text":""},{"location":"mappers/exe-decomp/#introduction","title":"Introduction","text":"<p>This mapper is not a firmware mapper but an executable mapper. It will map its call graph and its decompiled code with cross-references within the source code. In order the mapper will:</p> <ul> <li>Export the executable (Quokka) to extract its call graph</li> <li>Decompile all functions (with Hex-Rays) to dump the whole decompiled code</li> <li>Index all functions with the associated decompilation</li> <li>Apply cross-references between functions</li> </ul>"},{"location":"mappers/exe-decomp/#usage","title":"Usage","text":"<pre><code>Usage: pyrrha exe-decomp [OPTIONS] EXECUTABLE\n\n  Map a single executable call graph into a numbatui-compatible database.It also index the decompiled code\n  along with all call cross-references.\n\nOptions:\n  -d, --debug                  Set log level to DEBUG\n  --db PATH                    NumbatUI DB file path (.srctrldb).  [default: pyrrha.srctrldb]\n  --disassembler DISASSEMBLER  Disassembler to use for disassembly.  [default: Disassembler.AUTO]\n  -h, --help                   Show this message and exit.\n</code></pre> <p>Note</p> <p>This mapper create the Quokka export of the binary as well as a cache version of all the decompiled function of the analyzed binary.. If these files already exist, it loads them without regenerate them. Like that it also allowed to use <code>pyrrha</code> in systems without Quokka and/or IDA. </p> <p>After firmware analysis, you can visualize and navigate into the results with <code>numbatui</code>. The user interface is described in depth in the NumbatUI documentation.     Do not hesitate to take a look at  all the possibilities offered by NumbatUI, especially Custom Trails.</p>"},{"location":"mappers/fs-cg/","title":"<code>fs-cg</code>: Inter Image Call Graph mapper","text":""},{"location":"mappers/fs-cg/#introduction","title":"Introduction","text":"<p>The <code>fs-cg</code> push deeper to <code>fs</code> mapper concept by mapping the call graph of all executables on a firmware. So it not only relates imports to exports but track precisely where within the executables. It is thus possible to know precisely which function is called by which across the firmware. As such, anyone can follow control-flow between programs.</p> <p>The main drawback is that computing a program call graph requires disassembly and is thus more computationaly intensive. That task is currently done using the Quokka exporter.</p>"},{"location":"mappers/fs-cg/#usage","title":"Usage","text":"<p>This mapper uses the output of the <code>fs</code> mapper to resolve symlinks automatically. The dump should be provided on the command line. The <code>ROOT_DIRECTORY</code> should contain the whole filesystem to be indexed. </p> <p>Tip</p> <p>You can use the environement variable <code>IDAPATH</code> to indicate in which directory <code>ida</code> binary is.</p> <pre><code>Usage: pyrrha fs-cg [OPTIONS] ROOT_DIRECTORY\n\n  Map a the Inter-Image Call Graph of a whole filesystem into a NumbatUI db.It disassembles executables using a\n  disassembler and extract the call graph.It then results all call references across binaries.\n\nOptions:\n  -d, --debug          Set log level to DEBUG\n  --db PATH            NumbatUI DB file path (.srctrldb).  [default: fs-cg.srctrldb]\n  -j, --jobs INT       Number of parallel jobs created (threads).  [default: 1; 1&lt;=x&lt;=11]\n  --ignore             When resolving duplicate imports, ignore them\n  --arbitrary          When resolving duplicate imports, select the first one available\n  --interactive        When resolving duplicate imports, user manually select which one to use=\n  -h, --help           Show this message and exit.\n</code></pre> <p>Note</p> <p>This mapper create the Quokka export of each binary nearby each executable file. If this file already exists, it loads it without regenerate it. Like that it also allowed to use <code>pyrrha</code> in systems without Quokka and/or IDA. </p> <p>After firmware analysis, you can visualize and navigate into the results with <code>numbatui</code>. The user interface is described in depth in the NumbatUI documentation.     Do not hesitate to take a look at  all the possibilities offered by NumbatUI, especially Custom Trails.</p>"},{"location":"mappers/fs/","title":"<code>fs</code>: ELF/PE imports/exports and the associated symlinks","text":"<p>Demo</p> <p>An live demo of this mapper and how you can use NumbatUI to visualize its results is available here.</p>"},{"location":"mappers/fs/#usage","title":"Usage","text":""},{"location":"mappers/fs/#mapping-with-pyrrha","title":"Mapping with Pyrrha","text":"<p>First, create your db with <code>pyrrha</code>. The <code>ROOT_DIRECTORY</code> should contain the whole filesystem you want to map, it should be already extracted or mounted. <code>ROOT_DIRECTORY</code> will be considered by Pyrrha as the filesystem root for all the symlink resolutions. </p> <pre><code>Usage: Usage: pyrrha fs [OPTIONS] ROOT_DIRECTORY\n\n  Map a filesystem into a numbatui-compatible db. It maps ELF and PE files, their imports and their exports plus\n  the symlinks that points on these executable files.\n\nOptions:\n  -d, --debug     Set log level to DEBUG\n  --db PATH       NumbatUI DB file path (.srctrldb).  [default: pyrrha.srctrldb]\n  -e, --json      Create a JSON export of the resulting mapping.\n  -j, --jobs INT  Number of parallel jobs created (threads).  [default: 1; 1&lt;=x&lt;=16]\n  --ignore        When resolving duplicate imports, ignore them\n  --arbitrary     When resolving duplicate imports, select the first one available\n  --interactive   When resolving duplicate imports, user manually select which one to use\n  -h, --help      Show this message and exit.\n</code></pre> <p>You can also export your Pyrrha results as a JSON file (option <code>-j</code>) to be able to postprocess them. For example, you can diff the results between two versions of the same system and list the binaries added/removed and which symbols has been added/removed (cf example script in <code>example</code>).</p>"},{"location":"mappers/fs/#visualization-with-numbatui","title":"Visualization with NumbatUI","text":"<p>Open the resulting project with <code>numbatui</code>. You can now navigate on the resulting cartography. The user interface is described in depth in the NumbatUI documentation.</p> <ul> <li> <p> Symbols and libraries imported by <code>libgcc_s.so.1</code>.</p> </li> <li> <p> Symlinks pointing on <code>busybox</code>.</p> </li> </ul> <p>Do not hesitate to take a look at NumbatUI documentation to explore all the possibilities offered by Sourcetrail. Custom Trails could be really useful in a lot of cases.</p> <p>Sourcetrail Representation</p> <p>If you are visualizing results with Sourcetrail, the exported functions and symbols, and the symlinks are represented as follows:</p> Binaries Exported functions Exported symbols Symlinks"},{"location":"mappers/fs/#quick-startusage-example","title":"Quick Start\u2014Usage Example","text":"<p>Let's take the example of an OpenWRT firmware which is a common Linux distribution for embedded targets like routers.</p> <p>First, download the firmware and extract its root-fs into a directory. Here we download the last OpenWRT version for generic x86_64 systems. <pre><code>wget https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/openwrt-22.03.5-x86-64-rootfs.tar.gz -O openwrt_rootfs.tar.gz\nmkdir openwrt_root_fs &amp;&amp; cd openwrt_root_fs\ntar -xf ../openwrt_rootfs.tar.gz\ncd .. &amp;&amp; rm openwrt_rootfs.tar.gz\n</code></pre></p> <p>Then we can run Pyrrha on it. It will produce some logs indicating which symlinks or imports cannot be solved directly by the tool.  (Do not forget to activate your virtualenv if you have created one for Pyrrha installation.) <pre><code>pyrrha fs --db openwrt_db openwrt_root_fs -j $(nproc)\n</code></pre></p> <p>You can now navigate into the resulting cartography with NumbatUI. <pre><code>numbatUI openwrt_db.srctrlprj\n</code></pre></p> <p> </p>  Pyrrha result opened with NumbatUI."},{"location":"mappers/fs/#postprocessing-fs-result-the-diffing-example","title":"Postprocessing <code>fs</code> result: the diffing example","text":"<p>When you have to compare two bunch of executable files, for example two versions of the same firmware, it could be quickly difficult to determine where to start and have results in a short time. </p> <p>Diffing could be a solution. However, as binary diffing can be quite time-consuming, a first approach could be to diff the symbols contained in the binary files to determine which ones were added/removed. For example, using this technics can help you to determines quickly the files that have changed their internal structures versus the files that only contained little update of their dependency. To do that, you can use the JSON export of <code>fs</code> parser results.</p> <p>The following script prints on the standard output the list of files that has been added/removed and then the symbol changes file by file.</p> Diffing Pyrrha Exports <pre><code>#!/usr/bin/env python3\n\"\"\"Diff two Pyrrha result JSON exports.It removes the kernel mangling.\"\"\"\n\nimport argparse\nfrom pathlib import Path\n\nfrom pyrrha_mapper import FileSystem\n\n\ndef existing_file(raw_path: str) -&gt; Path | None:\n    \"\"\"Check if a path correspond to an existing file and transform it into a pathlib.Path object.\n\n    :param raw_path: the given path (as a string)\n    :return: the corresponding pathlib.Path object\n    \"\"\"\n    if not Path(raw_path).exists():\n        raise argparse.ArgumentTypeError('\"{}\" does not exist'.format(raw_path))\n    elif not Path(raw_path).is_file():\n        raise argparse.ArgumentTypeError('\"{}\" is not a file'.format(raw_path))\n    return Path(raw_path)\n\n\ndef main():\n    \"\"\"Diff two exports of `fs` result.\"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"json1\", type=existing_file, help=\"Path to old filesystem JSON.\")\n    parser.add_argument(\"json2\", type=existing_file, help=\"Path to new filesystem JSON.\")\n    args = parser.parse_args()\n\n    old_fs = FileSystem.from_json_export(args.json1)\n    new_fs = FileSystem.from_json_export(args.json2)\n\n    # Compute and display changes of binaries\n    old_bins = {b.path for b in old_fs.iter_binaries()}\n    new_bins = {b.path for b in new_fs.iter_binaries()}\n    added_bin = new_bins - old_bins\n    removed_bin = old_bins - new_bins\n    for type, bin_set in [(\"no longer\", removed_bin), (\"added\", added_bin)]:\n        print(f\"\\nBinaries {type} in {args.json2}:\")\n        for b in bin_set:\n            print(f\"\\t- {b}\")\n\n    print(\"\\nCommon binaries that have changed:\")\n    count = 0\n    for b1, b2 in (\n        (old_fs.get_binary_by_path(path), new_fs.get_binary_by_path(path))\n        for path in old_bins.intersection(new_bins)\n    ):\n        is_different = False\n        old_libs, new_libs = set(b1.imported_library_names), set(b2.imported_library_names)\n        if old_libs != new_libs:\n            count += 1\n            print(f\"{b1.name} have changed:\")\n            is_different = True\n            for type, bin_set in [(\"removed\", old_libs - new_libs), (\"added\", new_libs - old_libs)]:\n                for lib in bin_set:\n                    print(f\"\\t- lib {type}: {lib}\")\n\n        old_symbs, new_symbs = set(b1.imported_symbol_names), set(b2.imported_symbol_names)\n        if old_symbs != new_symbs:\n            if not is_different:\n                count += 1\n                print(f\"{b1.name} have changed:\")\n            is_different = True\n            for type, bin_set in [\n                (\"removed\", old_symbs - new_symbs),\n                (\"added\", new_symbs - old_symbs),\n            ]:\n                for lib in bin_set:\n                    print(f\"\\t- imported symbol {type}: {lib}\")\n    print(f\"Total having changed: {count}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"mappers/mappers/","title":"Pyrrha Mappers","text":"<p>Pyrrha provides the following mappers:</p> <ul> <li><code>fs</code>: a filesystem mapper. It maps  ELF/PE files, their imports and their exports.  Also map symlinks which target ELF files.</li> <li><code>fs-cg</code>: a filesystem call graph mapper. It maps the whole firmware by interconnecting call graphs of all executables (requires disassembly).</li> <li><code>exe-decomp</code>: Map an executable call graph along with its decompiled code. The mapper will use Sourcetrail source code indexing features to cross-reference calls within the source code.</li> </ul>"}]}